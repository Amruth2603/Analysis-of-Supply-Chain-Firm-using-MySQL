### PART A:::

-- 1.	Read the data from all tables.
select * from customer,orderitem,orders,product,supplier;

-- 2.	Find the country wise count of customers.
select country,count(id) as Total_Customers from customer group by country order by Total_Customers desc; 

-- 3.	Display the products which are not discontinued.
select ProductName from product where isdiscontinued not like 1;

-- 4.	Display the list of companies along with the product name that they are supplying.
select companyname, productname from supplier 
join product on supplier.id = product.SupplierId 
group by CompanyName,ProductName;

-- 5.	Display customer's information who stays in 'Mexico'
select concat(firstname,' ',lastname) as Name from customer where country like 'Mexico';


-- 6.	Display the price of costliest item that is ordered by the customer along with the customer details.
select o.*, max(totalamount) as MaxAmount from customer as o 
join orders on o.id = orders.CustomerId
group by CustomerId 
order by MaxAmount desc;

with cte2 as (
with cte1 as 
(select o.*, max(totalamount) as MaxAmount from customer as o 
join orders on o.id = orders.CustomerId
group by CustomerId )
select cte1.*,rank() over(order by MaxAmount desc) as nrank from cte1 )
select * from cte2 where nrank =1;


-- 7.	Display supplier id who owns highest number of products.

with cte2 as (
with cte1 as (
select supplierid,count(productname) over(partition by supplierid) as Max_products from product 
order by max_products desc)
select * , rank() over(order by max_products desc) as new_rank from cte1 as cte2) 
select distinct * from cte2 where new_rank = 1; 


-- 8.	Display month wise and year wise count of the orders placed.
select year(orderdate)as year_wise,month(orderdate) as month_wise,count(ordernumber) from orders 
group by year_wise,month_wise;


-- 9.	Which country has maximum suppliers.
select country,count(id) as suppliers from supplier group by country order by suppliers desc limit 1;


-- 10. Which customers did not place any order.
select a.firstname from customer as a 
left join orders on a.id = orders.customerid 
group by a.firstname
having count(ordernumber) = 0; 


### PART B:::

-- 1.	Arrange the product id, product name based on high demand by the customer.
select id , productname, sum(quantity) as quantity from product 
join orderitem using (id) 
group by id,productname 
order by quantity desc;


-- 2.	Display the number of orders delivered every year.
select year(orderdate) as Year_,count(ordernumber) as orders from orders group by year_;

-- 3.	Calculate year-wise total revenue.
select year(orderdate) as year_ , sum(totalamount) as totalrevenue from orders group by year_;

-- 4.	Display the customer details whose order amount is maximum including his past orders.
use supply_chain;
select * from customer 
where id = (select customerid from customer 
join orders on customer.id = orders.CustomerId
group by customerid,OrderNumber, totalamount 
having totalamount = (select max(totalamount) from orders));
 

SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
-- 5.	Display total amount ordered by each customer from high to low. (donot use sum)
select  customerid,totalamount from orders group by CustomerId order by TotalAmount desc;



/* A sales and marketing department of this company wants to find out how frequently 
customer have business with them. This can be done in two ways. (Answer Q 6 and Q 7 for the same) */
-- 6 Approach 1. List the current and previous order amount for each customers.
select a.id,TotalAmount, lag(totalamount)  over(partition by a.id) from customer as a
join orders on a.id = orders.CustomerId;

/* 7. Approach 2. Display the customerid, order ids and the 
order dates along with the previous order date and the next order date for every customer in the table:: */
select a.id,date(orderdate), lag(date(orderdate))  over(partition by a.id order by date(orderdate) desc) as PreviousOrder from customer as a
join orders on a.id = orders.CustomerId 
group by a.id,date(orderdate)
having max(previousorder);


select customerid, id, orderdate,
lag(orderdate) over (partition by customerid order by orderdate) as previous_order_date,
lead(orderdate) over (partition by customerid order by orderdate) as next_order_date
from orders;

-- 8.	Find out top 3 suppliers in terms of revenue generated by their products.

select a.id,companyname, sum(totalamount) as Revenue from supplier as a
join product as b on b.supplierid = a.id
join orderitem as c on b.id = c.productid
join orders as d on d.id = c.orderid
group by a.id,CompanyName 
order by revenue desc limit 3;
